VIM-CHEATSHEET_RU
АВТОРСКИЕ ЗАМЕЧАНИЯ
Скобки не обязательны. Они написаны, чтобы не было путаницы.


РЕДАКТИРОВАНИЕ {{{

БАЗОВЫЕ КОМАНДЫ
[num]i[text] (insert) - вставка на позиции курсора
I - вставка в начале строки
[num]a[text] (append) - вставка текста после курсора
A - вставка текста в конце строки
o - вставка на следующей строке
O - вставкa текста на предыдущей строке
[num]c[text] (change) - замена текста
cc - замена строки
C - то же самое, что и команда c$
[num]d[text] (delete) - удаление текста
dd - удаление строки
D - то же самое, что и команда d$
[num]x (x-out/аналогия с телетайпом) - удаление следующего символа
X - удаление предыдущего символа
[num]y (yank/выдернуть) - копирование текста
[num]yy - копирование строки
Y - то же самое, что и команда yy
p (paste) - вставка на следующей строке
P - вставка на предыдущей строке
. - повтор последней команды редактирования
u (undo) - отмена последней команды
U - отмена всех правок, которые происходили в строке, пока курсор на ней находился
CTRL+r (redo) - отмена отмены
s (substitute) - удаляет символ на позиции курсора и подставляет текст
S - удаляет строку и подставляет текст
[num]r (replace) - замена [num] следующих символов на введенный стмвол
R - замещает существующие символы без указания их количества
J - объединение двух строк
~ - смена регистра символа
% - поиск и перемещение на ближайшую закрытую/открытую скобку (такие как ), ], } или >)

}}}

ПЕРЕМЕЩЕНИЕ {{{

БАЗОВОЕ ПЕРЕМЕЩЕНИЕ
[num]h - налево на [num] символов (default [num] = 1)
[num]j - вниз на [num] символов (default [num] = 1)
[num]k - наверх на [num] символов (default [num] = 1)
[num]l - налево на [num] символов (default [num] = 1)

ПЕРЕМЕЩЕНИЕ ЭКРАНА (scrolling)
CTRL+b (back) - пролистать на экран вверх
CTRL+u - пролистать на полэкрана вверх
CTRL+y - пролистать на строку вверх
CTRL+e - пролистать на строку вниз
CTRL+d - пролистать на полэкрана вниз
CTRL+f - пролистать на экран вниз
z+- - пролистать экран наверх относитльно курсора
z+. - выровнить экран по центру относительно курсора
z+ENTER - пролистать экран вниз относительно курсора

ПЕРЕМЕЩЕНИЕ ПО СТРОКЕ {{{
^ (Hat) - переход на первый непустой символ строки
0 - переход на первый символ строки
$ - переход на последний непустой символ строки
b (beggining) - перейти назад в начало слова с учетом знаков препинания
B (Beggining) - перейти назад в начало cлова без учета знаков препинания
w - перейти вперед на начало слова с учетом знаков препинания
W - перейти вперед на начало слова без учета знаков препинания
e (end) - перейти в конец слова с учетом знаков препинания
E (End) - перейти в конец слова без учета знаков препинания
[num]| - переход на [num] столбец текущей строки

ПОИСК СИМВОЛА В ТЕКУЩЕЙ СТРОКЕ
f[sym] (find [sym]) - переход в строке вперед на символ [sym]
F[sym] (Find [sym]) - переход в строке назад на символ [sym]
t[sym] - переход в строке вперед перед символом [sym]
T[sym] - переход в строке назад после символа [sym]
; - повтор поиска в том же направлении, что и команда
, - повтор поиска в противоположном направлении, что и команда
}}}

ГЛОБАЛЬНОЕ ПЕРЕМЕЩЕНИЕ
[num]H ([num] High) - переход в начало экрана на [num] строк ниже самой верхней строки без scrolling (default: [num] = 0)
M (Middle) - переход в середину экрана без scrolling
[num]L ([num] Low) - переход в конец экрана на [num] строк вверх самой нижней строки без scrolling (default: [num] = 0)
[num]gg ([num] Go GO) - переход на строку [num] (default: [num] = 0)
[num]G ([num] Go To) - переход на строку [num] (default: [num] = last line)
- - переход на начало предыдущей строки
+ - переход на начало следующей строки
CTRL+g - вывод текущего положения в файле


}}}

ОБЩИЙ ВИД КОМАНД:
[number][command][text object]/[command][number][text object], где:
[number] - необязательный числовой аргумент
[command] - команда редактирования (напр. c, d или y)
[text object] - команда перемещения
Например, команды
cH/dH/yH
cG/dG/yG
c13G/d13G/y13G

ПОИСК {{{

ПОИСК ПО ФАЙЛУ
/[pattern] - поиск [pattern] вперед
?[pattern] - поиск [pattern] назад
n (next) - поиск в том же направлении, что и команда
N - поиск в отличном направлении, что и команда
/ - повтор поиска вперед
? - повтор поиска назад
}}}

РАБОТА С ФАЙЛАМИ {{{

ОТКРЫТИЕ ФАЙЛА
vi +[num] [file] - открытие файла на n-ой строке.
vi + [file] -  открытие файла на последней строке
vi +[/pattern] [file] - открыти файла на совпавшем [/pattern]
view/(vi -R) - открытие файла в read only режиме
vi -r - список всех файлов, сохраненных системой в текущей дерриктории (*.swp формат)
vi -r [file] - восстановление файла из буфера с помощью файла подкачки

СОХРАНЕНИЕ И ВЫХОД
ZZ - сохранение и выход
}}}

РАБОТА С БУФФЕРАМИ
"[(1-9)/(a-z)][P/p] - вставка из буффера, где [1-9] - последние изменения, а [a-z] - сохраненные в буфер изменения
"[(a-Z)][num][command] - если [a-z], то буфер перезаписывается, а [A-Z] - в буфер добавляются символы

РАБОТА С МЕТКАМИ
m[a-Z] (mark) - поставить метку на текущую позицию
'[mark] - поместиться на начало строки с меткой [mark]
`[mark] - поместиться на символ с меткой [mark]
'' - возвращает на начало строки, содержащей предыдущую метку
`` - возвращает на предыдушую метку
}}}

РЕДАКТОР EX {{{
войти в ex из vi можно через клавишу Q и выйти с помощью команды (vi)

КОМАНДЫ
p (print) - печатает строки
d (delete) - удаляет строки
m (move) - перемещает строки
co/t (copy) - копирует строки
ya (yank) - копирует строки (можно использовать с именованными буферами)
pu (put) - вствляет строки (можно использовать с именованными буферами)
j - объединяет строки

АДРЕСАЦИЯ СТРОК {{{

ЯВНОЕ/ШАБЛОННОЕ УКАЗАНИЕ ДИАПАЗОНА
:[num] - переход на [num] строку
:[(start)/(/pattern1/)],[(end)/(/pattern2/)][command], где
[start] и [end] - числовой диапазон строк
[pattern1/pattern2] - поиск строк по шаблону
[command] - команда ex

СИМВОЛЫ АДРЕСАЦИИ СТРОК
. - текущая строка
$ - последняя строка файла
% - все строки

ОТНОСИТЕЛЬНЫЕ ОПЕРАЦИИ
+[num] - прибавит к номеру строки число [num]
-[num] - убавит от номера строки число [num]

ВСПОМОГАТЕЛЬНЫЕ КОМАНДЫ
:= - вывод числа строк
:.= - вывод текущей строки
:/pattern/= - номер следующей строки, содержащей pattern

Примечание:
Можно использовать (;) вместо (,), чтобы разделить указание диапазона от переопределения текущего положения
}}}

ГЛОБАЛЬНЫЙ ПОИСК
:g - ищет глобально по шаблону и выводит найденные строки
:g!/v - противоположность g

СОЧЕТАНИЯ КОМАНД EX
| - разделитель команд

СОХРАНЕНИЕ И ВЫХОД
:w [file] (write) - сохраняет буфер в файл [file] (default: [file] - редактируемый в данный момент)
:q (quit) - выход из редактора
:wq/x - запись и выход из файла
:r [file] (read) - вставка текста из [file] в текущий буфер


Примечание:
Чтобы игнорировать системные предупреждения, нужно поставить символ ! в конце команды

РЕДАКТИРОВАНИЕ НЕСКОЛЬКИХ ФАЙЛОВ {{{

КОМАНДЫ VI
vi [file1] [file2] - вызов редактирования двух файлов

КОМАНДЫ EX
:n - вызов следующего файла
:args - перечисление всех файлов, присутствующих в командной строке
:rewind - делает текущим первый файл
(:e [file])/(CTRL+^^) - создать буфер и скопировать в него текст из [file]
:e - пересоздаст текущий буфер
% - обращение к текущему файлу (выводит его имя)
# - обращение к альтернативному файлу (выводит его имя)

}}}



ГЛОБАЛЬНАЯ ЗАМЕНА {{{

ОСНОВНЫЕ КОМАНДЫ
s (substitute) - подстановка
g (global) - глобальность
c (confirm) - подтверждение глобальной замены

ШАБЛОН БАЗОВОГО ИСПОЛЬЗОВАНИЯ
:[range][command], где
[range] - может быть как числовой диапазон, так и диапазон патернов
[command] - любая команда(ы) EX
Примеры использования:
1):%s/[pattern1]/[pattern2]/g
2):g/[pattern1]/s/[pattern2]/[pattern3]/g
3):g/[pattern1]/s//[pattern3]/g ([pattern2] = [pattern1] = blank)

МЕТАСИМВОЛЫ, ИСПОЛЬЗУЕМЫЕ ПРИ ПОИСКЕ
. - любой одиночные символ, отличный от перевода строки
* - повторение любого количества раз символа, стоящего перед звездочкой (включая, что символ может отсутствовать)
^ - требование нахождения в начале строки
$ - требование нахождения в конче строки
\ - экранирующий символ
[...] - любой символ, заключенный в квадратные скобки
\( \) - сохранение шаблона, заключенного между скобками в (специальном месте)/(временном буфере, обращаясь через \n)
\< \> - указание на начало (\<) или конец (\>) слова
~ - замена на последнее регулярное выражение

МЕТАСИМВОЛЫ, ИСПОЛЬЗУЕМЫЕ ПРИ ЗАМЕНЕ
\n - замена текста, соответствующего n-му шаблону
\ - экранирующий символ
& - замена на текст из поиска
~ - найденная строка заменяется на текст, определенный в полследней команде подстановки
(\u)/(\l) - замена следующего символа на прописной или строчной, соответственно
(\U)/(\L) и (\e)/(\E) - такие же действия как и у \u или \l, только действуют, пока не встретят \e или \E или конец строки замены

ТРЮКИ ПРИ ЗАМЕНАХ
1):s <=> :s//~/
2)& <=> :&
3)Кроме / можно использовать любой неалфавитно-цифровой символ в качестве разделитель, кроме (\, ", |)

ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ
1):%s/child\([ ,.;:!?]\)/children\1/g - \1 заменит именно на тот символ, что был в квадратных скобках
2):%s/\<child\>/children/g - отыщет только целое child
3):%s/\(.*\)  *$/\1/g - удалит пробелы в конце строки
}}}

}}}

НАСТРОЙКА РЕДАКТОРА {{{
Файл vimrc - обрабатывается редактором ex перед переходом в vi

БАЗОВЫЕ КОМАНДЫ
:so [file] (source) - использовать команды из файла [file]
Примечание: так можно в главный vimrc импортировать другие настройки

КОМАНДА SET 
:set [no][option][=num] установка опции vi, где
[no] - бинарный переключатель (если есть - 1, нет - 0)
:set all - все установки, используемые vi
:set [option]? - вывод значения параметра [option]
:set - все заданные опции, включая те, что были заданы в текущей секции

ОПЦИИ {{{
ОТСТУПЫ
tabstop - количество пробелов, которыми отображается символ табуляции в тексте (табуляция - управляющий символ, а не пробел)
softtabstop - количество пробелов, которыми отображается символ табуляции при добавлении
shiftwidth - ширина отступов, добавляемых командами >> и <<
smarttab - если опция включена, то приведет к добавлению отступа при нажаети tab в начале строки, равному shiftwidth
expandtab - в режиме вставки заменяет табуляцию на пробелы
autoindent - копирует отступы с текущей строки в следующую
smartindent - autoindent + учитывает особенности синтаксиса со скобками
}}}
}}}

ВЫЗОВ КОМАНД UNIX ИЗ VI 
:![command] - восклицательный знак предписывает ex создать оболочку и выполнить команду [command]
:sh - создание оболочки sh (выход командой CTRL+d)
Примечание: вызов команд оболочки можно сочетать с :read, вставляя результат выполнения команды

АББРЕВИАТУРЫ
- последовательности, автоматически расшифровывающиеся в режиме вставки
:ab [abbr] [phrase], где
[abbr] - аббреиватура для указанной фразы [phrase]
:unab [abbr] - отмена аббревиатуры
:ab - отображение всех аббревиатур

ОТОБРАЖЕНИЕ (mapping) КЛАВИШ
:map [keyboard seq] [command seq] - макрос для командного режима
:unmap [keyboard seq] - отмена макроса с [keyboard seq] для командного режима
:map - список [keyboard seq], для которых есть отображение
:map! [keyboard seq] [command seq] - макрос для режима вставки
:unmap! [keyboard seq] - отмена макроса с [keyboard seq] для режима вставки
:map #[number] [command seq] - отображение функциональной клавиши F+[number] в [command seq]
:@[name buffer] - выполнение команды, содержащейся в буффере [name buffer] (@-функция)

КОНТРОЛЬ ЗА ОТСТУПАМИ
:set autoindent - повторения отступа, что и на предыдущей
CTRL+t - при включенном autoindent переводит курсор на след. уровень (в режиме вставки)
CTRL+d - при включенном autoindent переводит курсор на пред. уровень (в режиме вставки)
Примечание: 
^ CTRL+d - перемещение курсора на начало строки, но только для текущей
0 СTRL+d - перемещение курсора на начало строки с изменением уровня отступа
[num] >> - смещение на [num] строк на \tab вперед
[num] << - смещение на [num] строк на \tab назад

ТЕГИ 
:!ctags [file] - создания файла tags, содержащего данные о местоположении импортируемой функции из файла [file]
(:tag [function name])/(^]) - поиск в файле tags местоположение функции [function name] и перемещение курсора на ее определение
CTRL+t - возвращение к сохраненному положению в стеке тегов

СВЕРТКИ (folding)
:mkview - вызов сохраненных сверток
:loadview - сохранение сверток
zf[move] - создать свертку с тек. строки до той, куда переместит след. команда перемещения (manual)
[count]zf - свертка, охватывающая [count] строк (manual)
zi - переключение опции foldenable (zn, zN - вкл., выкл. соотв.)
zM <=> foldlevel = 0
zm, zr - декремент (zm) или инкремент (zr) foldlevel
zj, zk - прыжок на след. (zj) или пред. (zk) свертку
za - переключение состояния одной свертки
zo (open) - открывает одну свертку
zc (close) - закрывает одну свертку
zd (delete) - удаляет одну свертку
zA - переключение состояния сверток (скрытая/раскрытая), рекурсивно
zO (open) - открывает свертки, рекурсивно
zC (close) - закрытие свертки, рекурсивно
zD (delete) - удаление свертки, рекурсивно
zE - удаление всех сверток в файле

МЕТАСИМВОЛЫ РАСШИРЕННЫХ РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ (ERE)
- нельзя использовать в vim
[str1]|[str2] - разделяет несколько возможных вариантов [str1] и [str2]
(...) - создание группы, к которой можно применять другие операторы (можно обращаться также через нумерованный буфер)
+ - соотв. одному или нескольким предшествующим регулярным выражениям
? - ноль и одно вхождение предшествующего регулярного выражения
{...} - интервальное выражение



